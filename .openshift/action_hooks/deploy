#!/bin/bash
# This deploy hook gets executed after dependencies are resolved and the
# build hook has been run but before the application has been started back
# up again.  This script gets executed directly, so it could be python, php,
# ruby, etc.

#########################
# Bullshit for the database (don't understand what it does)
#########################

set -e

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]
then
    echo 1>&2
    echo "Could not find mysql database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c mysql-5.1" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
fi

RETRY=60
while [ $RETRY -gt 0 ] ; do
    #reload env variables
    for env_var in  $OPENSHIFT_HOMEDIR/.env/*
    do
        . $env_var
    done

    #check for db
    if [ -n "$OPENSHIFT_MYSQL_DB_HOST" ]
    then
        echo "Database server found at $OPENSHIFT_MYSQL_DB_HOST. initializing..."
        sleep 5
        break
    fi

    sleep 1
    RETRY=$(( $RETRY - 1 ))
done

if [ -z "$OPENSHIFT_MYSQL_DB_HOST" ]
then
    exit 5
fi


#########################
# Delayed job, migrations, dropbox uploader
#########################

pushd ${OPENSHIFT_REPO_DIR} > /dev/null

# Stop delay jobs before migration

echo "Stopping delayed_job"
RAILS_ENV=production script/delayed_job stop


# Run ruby mugrations

echo "Migrating database..."
bundle exec rake db:migrate RAILS_ENV="production"


# Restart delayed jobs

echo "Starting delayed_job (in background to speed things up)"
RAILS_ENV=production script/delayed_job -n 2 start &


# Give exec right to dropbox uploader script

echo "Make sure that the dropbox script is executable"
chmod +x script/dropbox_uploader.sh

popd > /dev/null
